{"version":3,"sources":["Chatbox.js","Contact.js","Contactsbox.js","App.js","index.js"],"names":["Chatbox","sendMessage","activeContact","useState","message","setMessage","chatEnd","useRef","useEffect","current","scrollIntoView","scrollToBottom","className","image","name","onClick","window","document","body","chatHistory","map","item","index","from","Date","date","toLocaleString","ref","onSubmit","e","preventDefault","value","placeholder","onChange","input","target","autoFocus","type","getRandomColor","color","Math","floor","random","toString","length","Contact","id","this","style","width","height","borderRadius","textShadow","backgroundColor","textAlign","display","verticalAlign","toUpperCase","newMessages","Contactsbox","selectActiveContact","contactList","clearNewMessages","search","setSearch","sort","a","b","filter","contact","toLowerCase","includes","lastMessage","App","setContactList","setActiveContact","notification","setNotification","fetch","res","json","data","list","_id","console","error","getContacts","useCallback","user","find","getActiveContact","prevState","addMessage","newMessage","fromWhom","method","headers","JSON","stringify","parse","msg","setTimeout","round","sendMessageToDatabase","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7ddb0aae.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport { IoSendOutline } from 'react-icons/io5';\r\nimport { AiOutlineCheckCircle, AiOutlineArrowUp } from 'react-icons/ai';\r\n\r\nfunction Chatbox({ sendMessage, activeContact }) {\r\n  const [message, setMessage] = useState('');\r\n  const chatEnd = useRef(null);\r\n\r\n  useEffect(() => {\r\n    function scrollToBottom() {\r\n      chatEnd.current?.scrollIntoView();\r\n    }\r\n    scrollToBottom();\r\n  }, [activeContact]);\r\n\r\n  function handleInput(e) {\r\n    const input = e.target.value;\r\n    setMessage(input);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    if (message) {\r\n      sendMessage(message);\r\n      setMessage('');\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"chatbox\">\r\n      {typeof activeContact !== 'object' ? (\r\n        <p className=\"chatbox__placeholder\">{activeContact}</p>\r\n      ) : (\r\n        <>\r\n          <div className=\"chatbox__active__contact\">\r\n            <div className=\"contact__wrapper__image\">\r\n              {activeContact.image}\r\n              <div className=\"contact__wrapper__image__icon\">\r\n                <AiOutlineCheckCircle />\r\n              </div>\r\n            </div>\r\n            <h4>{activeContact.name}</h4>\r\n            <div\r\n              className=\"chatbox__back_arrow\"\r\n              onClick={() => window.document.body.scrollIntoView()}\r\n            >\r\n              <AiOutlineArrowUp />\r\n            </div>\r\n          </div>\r\n          <div className=\"chatbox__chat\">\r\n            {activeContact.chatHistory.map((item, index) => {\r\n              return (\r\n                <div key={index} className=\"chatbox_message_wrapper\">\r\n                  <div\r\n                    className={\r\n                      item.from === 'You'\r\n                        ? 'chatbox__message__outcoming'\r\n                        : 'chatbox__message__incoming'\r\n                    }\r\n                  >\r\n                    {item.from !== 'You' ? (\r\n                      <div>{activeContact.image}</div>\r\n                    ) : null}\r\n                    <p\r\n                      className={\r\n                        item.from === 'You'\r\n                          ? 'chatbox__message__outcoming__text'\r\n                          : 'chatbox__message__incoming__text'\r\n                      }\r\n                    >\r\n                      {item.message}\r\n                    </p>\r\n                  </div>\r\n                  <p\r\n                    className={\r\n                      item.from === 'You'\r\n                        ? 'chatbox__message__outcoming__date'\r\n                        : 'chatbox__message__incoming__date'\r\n                    }\r\n                  >\r\n                    {new Date(item.date).toLocaleString()}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      )}\r\n      {typeof activeContact !== 'string' ? (\r\n        <>\r\n          <div ref={chatEnd}></div>\r\n          <form onSubmit={onSubmit}>\r\n            <input\r\n              value={message}\r\n              placeholder=\"Type your message\"\r\n              onChange={handleInput}\r\n              autoFocus\r\n            />\r\n            <button type=\"submit\">\r\n              <IoSendOutline />\r\n            </button>\r\n          </form>\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbox;\r\n","export function getRandomColor() {\r\n  const color = Math.floor(Math.random() * 16777215).toString(16);\r\n  if (color.length > 5) {\r\n    return `#${color}`;\r\n  } else {\r\n    return getRandomColor();\r\n  }\r\n}\r\n\r\nclass Contact {\r\n  constructor(id, name, chatHistory) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.chatHistory = chatHistory;\r\n    this.image = (\r\n      <div\r\n        style={{\r\n          width: '50px',\r\n          height: '50px',\r\n          borderRadius: '50%',\r\n          color: 'white',\r\n          textShadow: '-1px 0 black',\r\n          backgroundColor: getRandomColor(),\r\n          textAlign: 'center',\r\n          display: 'table-cell',\r\n          verticalAlign: 'middle',\r\n        }}\r\n      >\r\n        {this.name[0].toUpperCase()}\r\n      </div>\r\n    );\r\n    this.newMessages = 0;\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import { useState } from 'react';\r\nimport { BiSearch } from 'react-icons/bi';\r\nimport { AiOutlineCheckCircle } from 'react-icons/ai';\r\nimport { GoPerson } from 'react-icons/go';\r\n\r\nfunction Contactsbox({ selectActiveContact, contactList, clearNewMessages }) {\r\n  const [search, setSearch] = useState('');\r\n\r\n  function handleSearchInput(e) {\r\n    const input = e.target.value;\r\n    setSearch(input);\r\n  }\r\n\r\n  return (\r\n    <div className=\"contactsbox\">\r\n      <div className=\"contactsbox__header\">\r\n        <div className=\"contactsbox__profile\">\r\n          <GoPerson />\r\n          <div className=\"contact__wrapper__image__icon\">\r\n            <AiOutlineCheckCircle />\r\n          </div>\r\n        </div>\r\n        <form>\r\n          <div className=\"contactsbox__svg\">\r\n            <BiSearch />\r\n          </div>\r\n          <input\r\n            type=\"search\"\r\n            value={search}\r\n            placeholder=\"Search or start new chat\"\r\n            onChange={handleSearchInput}\r\n          />\r\n        </form>\r\n      </div>\r\n      <h2>Chats</h2>\r\n      {contactList\r\n        .sort((a, b) => {\r\n          if (a.chatHistory.length && b.chatHistory.length) {\r\n            return (\r\n              b.chatHistory[b.chatHistory.length - 1].date -\r\n              a.chatHistory[a.chatHistory.length - 1].date\r\n            );\r\n          }\r\n          return 1;\r\n        })\r\n        .filter((contact) => {\r\n          if (search.length) {\r\n            return contact.name.toLowerCase().includes(search.toLowerCase());\r\n          } else {\r\n            return contact;\r\n          }\r\n        })\r\n        .map((contact) => {\r\n          const lastMessage =\r\n            contact.chatHistory[contact.chatHistory.length - 1];\r\n          return (\r\n            <div\r\n              key={contact.id}\r\n              onClick={() => {\r\n                selectActiveContact(contact);\r\n                setSearch('');\r\n                clearNewMessages(contact.id);\r\n              }}\r\n              className=\"contact__wrapper\"\r\n            >\r\n              <div className=\"contact__wrapper__image\">\r\n                {contact.image}\r\n                <div className=\"contact__wrapper__image__icon\">\r\n                  <AiOutlineCheckCircle />\r\n                </div>\r\n              </div>\r\n              <div className=\"contact__wrapper__text\">\r\n                <h4>\r\n                  {`${contact.name} `}\r\n                  <span className=\"contact__wrapper__text__notification\">\r\n                    {contact.newMessages > 0 ? contact.newMessages : ''}\r\n                  </span>\r\n                </h4>\r\n                <p>{lastMessage && `${lastMessage.message}`}</p>\r\n              </div>\r\n              <div>\r\n                {lastMessage &&\r\n                  `${new Date(lastMessage.date).toLocaleString()}`}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contactsbox;\r\n","import { useState, useEffect, useCallback } from 'react';\nimport Chatbox from './Chatbox';\nimport Contact from './Contact';\nimport Contactsbox from './Contactsbox';\n\nfunction App() {\n  const [contactList, setContactList] = useState([]);\n  const [activeContact, setActiveContact] = useState(\n    'Select a chat to start messaging',\n  );\n  const [notification, setNotification] = useState('');\n\n  useEffect(() => {\n    async function getContacts() {\n      try {\n        const res = await fetch('/api');\n        const data = await res.json();\n        const list = data.map(\n          (contact) =>\n            new Contact(contact._id, contact.name, contact.chatHistory),\n        );\n        setContactList(list);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    getContacts();\n  }, []);\n\n  function sendMessage(message) {\n    function addMessage(newMessage, fromWhom) {\n      setContactList((prevState) => {\n        return prevState.map((item) =>\n          item.id === activeContact.id\n            ? {\n                ...item,\n                chatHistory: [\n                  ...item.chatHistory,\n                  {\n                    message: newMessage,\n                    date: new Date(),\n                    from: fromWhom,\n                  },\n                ],\n              }\n            : item,\n        );\n      });\n    }\n    addMessage(message, 'You');\n\n    async function sendMessageToDatabase() {\n      try {\n        const res = await fetch('/api', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            id: activeContact.id,\n            newMessage: {\n              message,\n              date: Date.parse(new Date()),\n              from: 'You',\n              activeContact: activeContact.name,\n            },\n          }),\n        });\n        const msg = await res.json();\n        setTimeout(() => {\n          addMessage(msg, activeContact.name);\n          setNotification('');\n          setNotification(activeContact.id);\n        }, Math.round(Math.random() * (15 - 10) + 10) * 1000);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    sendMessageToDatabase();\n  }\n\n  const selectActiveContact = useCallback((contact) => {\n    setActiveContact(contact);\n  }, []);\n\n  useEffect(() => {\n    function getActiveContact() {\n      const user = contactList.find((item) => item.id === activeContact.id);\n      if (user) {\n        setActiveContact(user);\n      }\n    }\n    getActiveContact();\n  }, [contactList, activeContact]);\n\n  useEffect(() => {\n    function addNotification() {\n      if (notification && activeContact.id !== notification) {\n        setContactList((prevState) => {\n          return prevState.map((contact) =>\n            contact.id === notification\n              ? {\n                  ...contact,\n                  newMessages: contact.newMessages + 1,\n                }\n              : contact,\n          );\n        });\n        return;\n      }\n    }\n    addNotification();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [notification]);\n\n  function clearNewMessages(id) {\n    setContactList((prevState) => {\n      return prevState.map((contact) =>\n        contact.id === id\n          ? {\n              ...contact,\n              newMessages: 0,\n            }\n          : contact,\n      );\n    });\n  }\n\n  return (\n    <>\n      <Contactsbox\n        selectActiveContact={selectActiveContact}\n        contactList={contactList}\n        clearNewMessages={clearNewMessages}\n      />\n      <Chatbox sendMessage={sendMessage} activeContact={activeContact} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}